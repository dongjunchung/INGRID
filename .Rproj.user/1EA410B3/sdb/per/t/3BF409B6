{
    "collab_server" : "",
    "contents" : "###cross validation by fixing eta\n###x: features\n###K: maximum number of latent variables allowed\ncv.eta=function( x, t, d, foldid, K, eta, method ){\n\n\tn=length(t)\n\tnfold=max(foldid)\n\tcvraw=matrix(NA,nrow=nfold,ncol=K)\n\n\tfor(i in 1:nfold){\n\t\t##training\n   \t\to=which(foldid==i)\n   \t\tcox=coxph(Surv(t[-o],d[-o])~1)\n     \tres=residuals(cox,type=\"deviance\")\n     \tmod=spls.cox(x=x[-o,],y=res,K=K,eta=eta,\n       \t\tkappa=0.5,scale.x=T,scale.y=F)\n\n\t\tfor(k in 1:K){\n\t\t\tbeta=NULL\n\t\t\tw=mod$wlist[[k]]\n\t\t\tA=mod$Alist[[k]]\n\n\t\t\tx_minus_i=scale(x[-o,A],mod$meanx[A],mod$normx[A])\n\t\t\ts_minus_i=x_minus_i%*%w\n\t\t\tfit=coxph(Surv(t[-o],d[-o])~s_minus_i)\n\t\t    beta=w%*%summary(fit)$coef[,1]\n\n\t\t    x_i=scale(x[o,A],mod$meanx[A],mod$normx[A])\n\t\t    s_i=x_i%*%w\n\n\t\t    xfull=scale(x[,A],mod$meanx[A],mod$normx[A])\n\t\t\tsfull=xfull%*%w\n\n            if(method==\"auc\"){\n            \txlp <- rep(NA, n)\n       \t\t\txlp[-o] <- x_minus_i %*% beta\n            \txlp[o] <- x_i %*% beta\n\n            \tAUCs <- getIndicCViAUCSurvROCTest(xlp[-o],xlp[o],\n                  Surv.rsp=Surv(t[-o],d[-o]),\n                  Surv.rsp.new=Surv(t[o],d[o]),\n                  times.auc=seq(0,max(t),length.out=1000),\n                  times.prederr=seq(0,max(t),length.out=1000)[-(990:1000)],\n                  fit, plot.it=F)\n\n               cvraw[i,k]=AUCs$AUC_survivalROC.test$iauc\n            }\n\n            if(method==\"plik\"){\n            \tpl_minus_i=-2*logplik(x=x_minus_i,time=t[-o],\n            \t\tstatus=d[-o],b=beta, return.all=F )\n\n   \t\t\t    plfull=-2*logplik(x=xfull,time=t,status=d,\n   \t\t\t    \tb=beta, return.all=F )\n\n     \t\t\tcvraw[i,k]=plfull-pl_minus_i\n            }\n        }\n\t}\n\n    if(method==\"auc\"){\n    \tcvm=apply(cvraw,2,mean,na.rm=TRUE)\n\t\tcvsd=sqrt(apply(cvraw,2,var,na.rm=TRUE))/nfold\n\t}\n\n\tif(method==\"plik\"){\n\t\tweights=rep(1,n)\n\t\tweights=as.vector( tapply(weights*d,foldid,sum) )\n\t\tcvraw=cvraw/weights\n    \tcvm=apply(cvraw,2,weighted.mean,w=weights)\n    \tcvsd=sqrt( apply( scale(cvraw,cvm,F)^2, 2, weighted.mean,\n\t\t\t w=weights )/(nfold-1) )\n\t}\n\n\tresult=cbind( cvm, cvsd, 1:K, rep(eta,K) )\n\tresult\n }\n\n#################################################\n##-----------------------------------------------\n##-----------------------------------------------\ncv_splscox=function(x, t, d, foldid, K, eta.vec, method, parallel){\n\n\tif(parallel==T){\n\t\tcvmat=foreach(i=1:length(eta.vec),.combine='rbind')%dopar%{\n\t\t\tcv.eta(x=x,t=t,d=d,foldid=foldid,K=K,\n\t\t\teta=eta.vec[i],method=method)}\n\t}\n\n\tif(parallel==F){\n\t\tcvmat=foreach(i=1:length(eta.vec),.combine='rbind')%do%{\n\t\t\tcv.eta(x=x,t=t,d=d,foldid=foldid,K=K,\n\t\t\teta=eta.vec[i],method=method)}\n\t}\n\n\topt.k=opt.eta=c(NA,NA)\n\n\tif(method==\"auc\"){\n\t\tidx=which.max(cvmat[,1])\n\n\t\topt.k[1]=cvmat[idx,3]\n \t \topt.eta[1]=cvmat[idx,4]\n\n \t \tse1=cvmat[idx,1]-cvmat[idx,2]\n \t \tmat=cvmat[cvmat[,1]>se1,,drop=F]\n \t \t##choose the most parsimonious model in terms of genes\n   \t\t##always choose the smallest k among those with largest eta\n \t \tq=which.max(mat[,4])\n\t\topt.k[2]=mat[q,3]\n \t \topt.eta[2]=mat[q,4]\n \t }\n\n \tif(method==\"plik\"){\n\t\tidx=which.min(cvmat[,1])\n\n\t\topt.k[1]=cvmat[idx,3]\n \t \topt.eta[1]=cvmat[idx,4]\n\n \t \tse1=cvmat[idx,1]+cvmat[idx,2]\n \t \tmat=cvmat[cvmat[,1]<se1,,drop=F]\n \t \t##choose the most parsimonious model in terms of genes\n   \t\t##always choose the smallest k among those with largest eta\n \t \tq=which.max(mat[,4])\n\t\topt.k[2]=mat[q,3]\n \t \topt.eta[2]=mat[q,4]\n \t }\n\tlist(cvmat=cvmat,opt.k=opt.k,opt.eta=opt.eta)\n}\n",
    "created" : 1501822482213.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3604980408",
    "id" : "3BF409B6",
    "lastKnownWriteTime" : 1501781045,
    "last_content_update" : 1501781045,
    "path" : "E:/Dr.Chung/2/INGRID/R/cv_eta.R",
    "project_path" : "R/cv_eta.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}